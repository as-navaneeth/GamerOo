<%- include('../partials/admin/header.ejs') %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <style>
        .img-container {
            max-width: 100%;
            margin-bottom: 1rem;
        }
        
        .preview-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 1rem;
        }
        
        .preview-item {
            position: relative;
            width: 150px;
            height: 150px;
        }
        
        .preview-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 4px;
            border: 2px solid #ddd;
        }
        
        .preview-actions {
            position: absolute;
            top: 5px;
            right: 5px;
            display: flex;
            gap: 5px;
        }
        
        .preview-actions button {
            padding: 2px 8px;
            font-size: 12px;
        }
        
        .cropper-container {
            max-height: 500px;
        }
        
        .modal-body {
            max-height: 70vh;
            overflow-y: auto;
        }
        
        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        
        .img-fluid {
            border: 1px solid #ddd;
            padding: 5px;
            border-radius: 4px;
            display: block;
            max-width: 100%;
            height: auto;
        }
        
        .image-cropper {
            max-width: 100%;
            position: relative;
        }
        
        .image-cropper img {
            border-radius: 4px;
            max-width: 100%;
        }
        
        .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            padding: 10px;
            margin-bottom: 15px;
        }
        
        .thumbnails-container img {
            max-width: 100px;
            max-height: 100px;
            object-fit: cover;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        /* Remove spinbuttons from number inputs */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        input[type=number] {
            -moz-appearance: textfield;
            appearance: none;
        }
    </style>
</head>

<div class="main-panel">
    <div class="content-wrapper">
        <div class="page-header">
            <h3 class="page-title">Add Product</h3>
        </div>
        <div class="row">
            <div class="col-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <form id="addProductForm" class="forms-sample" enctype="multipart/form-data">
                            <div class="form-group">
                                <label for="name">Product Name</label>
                                <input type="text" class="form-control" id="name" name="name" placeholder="Product Name" >
                            </div>

                            <div class="form-group">
                                <label for="description">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="4" ></textarea>
                            </div>

                            <div class="form-group">
                                <label for="category">Category</label>
                                <select class="form-control" id="category" name="category" >
                                    <option value="">Select Category</option>
                                    <% if(categories && categories.length>0) {%>
                                        <%categories.forEach(category=>{ %>
                                            <option value="<%=category._id%>"><%=category.name%></option>
                                        <% });%>
                                    <%}%>
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="brand">Brand</label>
                                <select class="form-control" id="brand" name="brand" >
                                    <option value="">Select Brand</option>
                                    <% brands.forEach(brand=> { %>
                                        <option value="<%= brand._id %>"><%= brand.brandName %></option>
                                    <% }); %>
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="regularPrice">Regular Price</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">₹</span>
                                    </div>
                                    <input type="number" class="form-control" id="regularPrice" name="regularPrice" min="0" step="0.01" >
                                </div>
                            </div>

                            
                            <div class="form-group">
                                <label for="offer">Offer (in %)</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="offer" name="offer" min="0" max="100" step="1" placeholder="Enter discount %">
                                    <div class="input-group-append">
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="salePrice">Sale Price</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">₹</span>
                                    </div>
                                    <input type="number" class="form-control" id="salePrice" name="salePrice" min="0" step="0.01">
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="stock">Stock</label>
                                <input type="number" class="form-control" id="stock" name="stock" min="0" >
                            </div>

                            <div class="form-group">
                                <h4>Product Images (Up to 3)</h4>
                                <div class="image-upload-container">
                                    <input class="form-control mb-2" type="file" id="imageInput" 
                                           accept="image/png, image/jpeg, image/jpg" multiple>
                                    <small class="text-muted">Select up to 3 images (max 5MB each)</small>
                                    <div id="images-error" class="error-message"></div>
                                    
                                    <div id="previewContainer" class="preview-container"></div>
                                </div>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary mr-2">Submit</button>
                                <button type="button" class="btn btn-dark" onclick="window.history.back()">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Cropper Modal -->
<div class="modal fade" id="cropperModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Crop Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="cropperImage" src="" alt="Image to crop">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let cropper = null;
    let selectedFiles = [];
    let currentEditIndex = -1;

    // Initialize Bootstrap modal
    const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));

    function handleImageSelect(event) {
        const files = event.target.files;
        const errorDiv = document.getElementById('images-error');
        
        // Clear previous error messages
        errorDiv.textContent = '';
        
        // Validate number of files
        if (selectedFiles.length + files.length > 3) {
            errorDiv.textContent = 'You can only upload up to 3 images';
            event.target.value = '';
            return;
        }
        
        // Process each selected file
        Array.from(files).forEach((file) => {
            // Validate file size
            if (file.size > 5 * 1024 * 1024) {
                errorDiv.textContent = `${file.name} is too large. Maximum size is 5MB`;
                return;
            }
            
            // Validate file type
            if (!['image/jpeg', 'image/jpg', 'image/png'].includes(file.type)) {
                errorDiv.textContent = `${file.name} is not a valid image type`;
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                showCropper(e.target.result);
            };
            reader.readAsDataURL(file);
        });
        
        // Clear input
        event.target.value = '';
    }

    function showCropper(imageSrc) {
        const cropperImage = document.getElementById('cropperImage');
        cropperImage.src = imageSrc;
        
        // Destroy existing cropper if any
        if (cropper) {
            cropper.destroy();
        }
        
        // Initialize new cropper
        cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 2,
            dragMode: 'move',
            autoCropArea: 1,
            restore: false,
            guides: true,
            center: true,
            highlight: false,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
        });
        
        cropperModal.show();
    }

    // Handle crop button click
    document.getElementById('cropButton').addEventListener('click', () => {
        if (!cropper) return;
        
        const canvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800
        });
        
        canvas.toBlob((blob) => {
            // Create file from blob
            const fileName = `cropped-image-${Date.now()}.jpg`;
            const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
            
            // Add to selected files
            if (currentEditIndex >= 0) {
                selectedFiles[currentEditIndex] = croppedFile;
            } else {
                selectedFiles.push(croppedFile);
            }
            
            // Update preview
            updatePreview();
            
            // Reset and hide modal
            currentEditIndex = -1;
            cropperModal.hide();
        }, 'image/jpeg');
    });

    function updatePreview() {
        const previewContainer = document.getElementById('previewContainer');
        previewContainer.innerHTML = '';
        
        selectedFiles.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = function(e) {
                const previewItem = document.createElement('div');
                previewItem.className = 'preview-item';
                
                previewItem.innerHTML = `
                    <img src="${e.target.result}" alt="Preview">
                    <div class="preview-actions">
                        <button type="button" class="btn btn-primary btn-sm" onclick="editImage(${index})">
                            <i class="mdi mdi-pencil"></i>
                        </button>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeImage(${index})">
                            <i class="mdi mdi-delete"></i>
                        </button>
                    </div>
                `;
                
                previewContainer.appendChild(previewItem);
            };
            reader.readAsDataURL(file);
        });
    }

    function editImage(index) {
        currentEditIndex = index;
        const file = selectedFiles[index];
        const reader = new FileReader();
        reader.onload = function(e) {
            showCropper(e.target.result);
        };
        reader.readAsDataURL(file);
    }

    function removeImage(index) {
        selectedFiles.splice(index, 1);
        updatePreview();
    }

    // Handle form submission
    document.getElementById('addProductForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (selectedFiles.length === 0) {
            document.getElementById('images-error').textContent = 'Please select at least one image';
            return;
        }
        
        const formData = new FormData(this);
        
        // Add each selected file to formData
        selectedFiles.forEach((file, index) => {
            formData.append('productImages', file);
        });
        
        try {
            const response = await fetch('/admin/addProducts', {
                method: 'POST',
                body: formData
            });
            
            const data = await response.json();
            
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: data.message || 'Product added successfully',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/admin/products';
                    }
                });
            } else {
                throw new Error(data.message || 'Failed to add product');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: error.message || 'Something went wrong',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });

    // Initialize image input handler
    document.getElementById('imageInput').addEventListener('change', handleImageSelect);
</script>